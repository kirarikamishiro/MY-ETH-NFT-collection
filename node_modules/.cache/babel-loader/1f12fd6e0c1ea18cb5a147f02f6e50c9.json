{"ast":null,"code":"var _jsxFileName = \"/Users/hasamayoshihito/Documents/ETH-NFT-collection/nft-collection-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport myEpicNFT from './utils/MyEpicNFT.json';\nimport \"./styles/App.css\";\nimport Icon from './assets/food_teuchi_udon.png'; // フロントエンドとコントラクトを連携するライブラリをインポートします。\n\nimport { ethers } from \"ethers\"; // useEffect と useState 関数を React.js からインポートしています。\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"@KamishiroKirari\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50; // コトントラクトアドレスをCONTRACT_ADDRESS変数に格納\n\nconst CONTRACT_ADDRESS = \"0xD9125bb66c667D2d88A875dB2A236f242D21fAcc\";\n\nconst App = () => {\n  _s();\n\n  const [lastTokenId, setLastTokenId] = useState(0);\n  const [myLatestTokenId, setMyLatestTokenId] = useState();\n  const [mintCount, setMintCount] = useState(); // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [minting, setMinting] = useState(false); // ユーザーが認証可能なウォレットアドレスを持っているか確認します。\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    } // ユーザーが認証可能なウォレットアドレスを持っている場合は、ユーザーに対してウォレットへのアクセス許可を求める。許可されれば、ユーザーの最初のウォレットアドレスを accounts に格納する。\n\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // イベントリスナーを設定\n      // この時点で、ユーザーはウォレット接続が済んでいます。\n\n      setupEventListener(); //setupMintCount();\n\n      checkChainId();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      } // ウォレットアドレスに対してアクセスをリクエストしています。\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]); // ウォレットアドレスを currentAccount に紐付けます。\n\n      setCurrentAccount(accounts[0]); // イベントリスナーを設定\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupMintCount = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectdContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNFT.abi, signer);\n        const number = await connectdContract.TotalMintCount();\n        setMintCount(number.toNumber());\n        console.log(\"setup mint count\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // setupEventListener 関数を定義します。\n  // MyEpicNFT.sol の中で event が　emit された時に、\n  // 情報を受け取ります。\n\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer); // Event が　emit される際に、コントラクトから送信される情報を受け取っています。\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber()); //setMintCount(tokenId.toNumber())\n\n          alert(`あなたのウォレットに NFT を送信しました。OpenSea に表示されるまで最大で10分かかることがあります。NFT へのリンクはこちらです: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkChainId = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        let chainId = await ethereum.request({\n          method: 'eth_chainId'\n        });\n        console.log(\"connected to chain\" + chainId);\n        const rinkebyChainId = \"0x4\";\n\n        if (chainId !== rinkebyChainId) {\n          alert(\"You are not connected to the Rinkeby Test Network\");\n        }\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // NFT を Mint する関数を定義しています。\n\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        setMinting(true);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setLastTokenId(prevLastTokenId => prevLastTokenId + 1);\n        setMinting(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleGetLastTokenId = async connectedContract => {\n    const id = await connectedContract.getLastTokenId();\n    if (!id) return;\n    setLastTokenId(id.toNumber() - 1);\n  }; // ページがロードされた際に下記が実行されます。\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    const {\n      ethereum\n    } = window; //if (!ethereum || !currentAccount) return;\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNftABI.abi, signer); //if (!connectedContract || !isRinkebyTestNetwork) return;\n\n    handleGetLastTokenId(connectedContract); // mint 後に emit された NewEpicNFTMinted から値を受け取る\n\n    const handleEmitEvent = (_from, tokenId) => {\n      setMyLatestTokenId(tokenId.toNumber());\n      setMyLSLatestTokenId(tokenId.toNumber());\n    };\n\n    connectedContract.on(\"NewEpicNFTMinted\", handleEmitEvent);\n    return () => connectedContract.off(\"NewEpicNFTMinted\", handleEmitEvent);\n  }, [currentAccount, isRinkebyTestNetwork, setMyLSLatestTokenId]); // renderNotConnectedContainer メソッド（ Connect to Wallet を表示する関数）を定義します。\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this); // Mint NFT ボタンをレンダリングするメソッドを定義します。\n\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: \"\\u6CE8\\u6587\\u3059\\u308B\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: \"\\u304F\\u308A\\u3077\\u3068\\u3046\\u3069\\u3093\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u30DC\\u30BF\\u30F3\\u3092\\u62BC\\u3057\\u3066\\u3046\\u3069\\u3093\\u304C\\u8CB7\\u3048\\u308BNFT\\u3092\\u4F5C\\u308D\\u3046\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this), minting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          height: 300\n        },\n        src: Icon,\n        alt: \"\\u30A2\\u30A4\\u30B3\\u30F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u8ABF\\u7406\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mintCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Du3UrWEfX0wBQh4c+E2G9pQ75Es=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hasamayoshihito/Documents/ETH-NFT-collection/nft-collection-starter-project/src/App.js"],"names":["myEpicNFT","Icon","ethers","React","useEffect","useState","useMemo","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","lastTokenId","setLastTokenId","myLatestTokenId","setMyLatestTokenId","mintCount","setMintCount","currentAccount","setCurrentAccount","minting","setMinting","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","checkChainId","connectWallet","alert","error","setupMintCount","provider","providers","Web3Provider","signer","getSigner","connectdContract","Contract","abi","number","TotalMintCount","toNumber","connectedContract","on","from","tokenId","chainId","rinkebyChainId","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","prevLastTokenId","handleGetLastTokenId","id","getLastTokenId","MyEpicNftABI","handleEmitEvent","_from","setMyLSLatestTokenId","off","isRinkebyTestNetwork","renderNotConnectedContainer","renderMintUI","height"],"mappings":"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","sourcesContent":["// App.js\nimport myEpicNFT from './utils/MyEpicNFT.json';\nimport \"./styles/App.css\";\nimport Icon from './assets/food_teuchi_udon.png'\n\n// フロントエンドとコントラクトを連携するライブラリをインポートします。\nimport { ethers } from \"ethers\";\n// useEffect と useState 関数を React.js からインポートしています。\nimport React, { useEffect, useState ,useMemo} from \"react\";\n\n\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\nconst TWITTER_HANDLE = \"@KamishiroKirari\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\n// コトントラクトアドレスをCONTRACT_ADDRESS変数に格納\nconst CONTRACT_ADDRESS = \"0xD9125bb66c667D2d88A875dB2A236f242D21fAcc\";\n\n\n\nconst App = () => {\n  const [lastTokenId, setLastTokenId] = useState(0);\n  const [myLatestTokenId, setMyLatestTokenId] = useState();\n\n  const [mintCount,setMintCount] =useState();\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [minting,setMinting] =useState(false);\n\n  // ユーザーが認証可能なウォレットアドレスを持っているか確認します。\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // ユーザーが認証可能なウォレットアドレスを持っている場合は、ユーザーに対してウォレットへのアクセス許可を求める。許可されれば、ユーザーの最初のウォレットアドレスを accounts に格納する。\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n      // イベントリスナーを設定\n      // この時点で、ユーザーはウォレット接続が済んでいます。\n      \n      setupEventListener();\n      //setupMintCount();\n      checkChainId();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n\n  // connectWallet メソッドを実装します。\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      // ウォレットアドレスに対してアクセスをリクエストしています。\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      console.log(\"Connected\", accounts[0]);\n\n      // ウォレットアドレスを currentAccount に紐付けます。\n      setCurrentAccount(accounts[0]);\n\n      // イベントリスナーを設定\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  \n  const setupMintCount = async() =>{\n    try{\n      const {ethereum} =window;\n      if(ethereum){\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectdContract = new ethers.Contract(CONTRACT_ADDRESS,myEpicNFT.abi,signer);\n        const number =  await connectdContract.TotalMintCount();\n        setMintCount(number.toNumber());\n        console.log(\"setup mint count\");\n      }else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    }catch (error) {\n      console.log(error)\n    }\n  }\n\n  // setupEventListener 関数を定義します。\n  // MyEpicNFT.sol の中で event が　emit された時に、\n  // 情報を受け取ります。\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        // Event が　emit される際に、コントラクトから送信される情報を受け取っています。\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          //setMintCount(tokenId.toNumber())\n          alert(\n            `あなたのウォレットに NFT を送信しました。OpenSea に表示されるまで最大で10分かかることがあります。NFT へのリンクはこちらです: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n\n        console.log(\"Setup event listener!\");\n        \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkChainId = async () => {\n    try{\n      const {ethereum} = window;\n      if(ethereum){\n        let chainId =await ethereum.request({method: 'eth_chainId'});\n        console.log(\"connected to chain\" +chainId);\n        const rinkebyChainId = \"0x4\";\n        if(chainId !== rinkebyChainId){\n          alert(\"You are not connected to the Rinkeby Test Network\");\n        }\n      }else{\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    }catch (error){\n      console.log(error)\n    }\n  }\n\n  \n\n  // NFT を Mint する関数を定義しています。\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        setMinting(true);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n        setLastTokenId((prevLastTokenId) => prevLastTokenId + 1);\n        setMinting(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleGetLastTokenId = async (connectedContract) => {\n    const id = await connectedContract.getLastTokenId();\n    if (!id) return;\n    setLastTokenId(id.toNumber() - 1);\n  };\n\n  // ページがロードされた際に下記が実行されます。\n  useEffect(() => {\n\n    checkIfWalletIsConnected();\n    \n  }, []);\n\n  useEffect(() => {\n    const { ethereum } = window;\n    //if (!ethereum || !currentAccount) return;\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      MyEpicNftABI.abi,\n      signer\n    );\n\n    //if (!connectedContract || !isRinkebyTestNetwork) return;\n\n    handleGetLastTokenId(connectedContract);\n    // mint 後に emit された NewEpicNFTMinted から値を受け取る\n    const handleEmitEvent = (_from, tokenId) => {\n      setMyLatestTokenId(tokenId.toNumber());\n      setMyLSLatestTokenId(tokenId.toNumber());\n    };\n    connectedContract.on(\"NewEpicNFTMinted\", handleEmitEvent);\n    return () => connectedContract.off(\"NewEpicNFTMinted\", handleEmitEvent);\n  }, [currentAccount, isRinkebyTestNetwork, setMyLSLatestTokenId]);\n\n  // renderNotConnectedContainer メソッド（ Connect to Wallet を表示する関数）を定義します。\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // Mint NFT ボタンをレンダリングするメソッドを定義します。\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMintNft}\n      className=\"cta-button connect-wallet-button\"\n    >\n      注文する\n    </button>\n  );\n\n\n\n\n  return (\n    <div className=\"App\">\n        <h1 className=\"header\">くりぷとうどん</h1>\n        <h2>ボタンを押してうどんが買えるNFTを作ろう</h2>\n        \n        {minting  ? (\n          <>\n            <img \n              style={{\n                height: 300,\n              }}\n              src={Icon}  \n              alt=\"アイコン\"\n            /><br></br>\n\n            <p>調理中...</p>\n          </>\n        ):(\n          <p>{mintCount}</p>\n        )}\n        \n        \n        {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUI()}\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}