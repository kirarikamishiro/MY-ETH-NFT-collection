{"ast":null,"code":"var _jsxFileName = \"/Users/hasamayoshihito/Documents/ETH-NFT-collection/nft-collection-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\n// useEffect と useState 関数を React.js からインポートしています。\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\"; // Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'あなたのTwitterのハンドルネームを貼り付けてください';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  /*\n  * ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*この段階でcurrentAccountの中身は空*/\n\n  console.log(\"currentAccount: \", currentAccount);\n  /*\n  * ユーザーが認証可能なウォレットアドレスを持っているか確認します。\n  */\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n    /* ユーザーが認証可能なウォレットアドレスを持っている場合は、\n     * ユーザーに対してウォレットへのアクセス許可を求める。\n     * 許可されれば、ユーザーの最初のウォレットアドレスを\n     * accounts に格納する。\n     */\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*\n  * connectWallet メソッドを実装します。\n  */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\n      * ウォレットアドレスに対してアクセスをリクエストしています。\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      /*\n      * ウォレットアドレスを currentAccount に紐付けます。\n      */\n\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"ここに Rinkbey Test Network にデプロイしたコントラクトのアドレスを貼り付けてください\";\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // renderNotConnectedContainer メソッドを定義します。\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n  /*\n  * ページがロードされたときに useEffect()内の関数が呼び出されます。\n  */\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u3042\\u306A\\u305F\\u3060\\u3051\\u306E\\u7279\\u5225\\u306A NFT \\u3092 Mint \\u3057\\u3088\\u3046\\uD83D\\uDCAB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: null,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 6\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hasamayoshihito/Documents/ETH-NFT-collection/nft-collection-starter-project/src/App.js"],"names":["ethers","React","useEffect","useState","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","console","log","checkIfWalletIsConnected","ethereum","window","accounts","request","method","length","account","connectWallet","alert","error","askContractToMintNft","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","nftTxn","makeAnEpicNFT","wait","hash","renderNotConnectedContainer","twitterLogo"],"mappings":"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","sourcesContent":["// useEffect と useState 関数を React.js からインポートしています。\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\n// Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\nconst TWITTER_HANDLE = 'あなたのTwitterのハンドルネームを貼り付けてください';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\nconst App = () => {\n  /*\n  * ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*この段階でcurrentAccountの中身は空*/\n  console.log(\"currentAccount: \", currentAccount);\n  /*\n  * ユーザーが認証可能なウォレットアドレスを持っているか確認します。\n  */\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n    } else {\n        console.log(\"We have the ethereum object\", ethereum);\n    }\n    /* ユーザーが認証可能なウォレットアドレスを持っている場合は、\n     * ユーザーに対してウォレットへのアクセス許可を求める。\n     * 許可されれば、ユーザーの最初のウォレットアドレスを\n     * accounts に格納する。\n     */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  /*\n  * connectWallet メソッドを実装します。\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      /*\n      * ウォレットアドレスに対してアクセスをリクエストしています。\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      console.log(\"Connected\", accounts[0]);\n      /*\n      * ウォレットアドレスを currentAccount に紐付けます。\n      */\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"ここに Rinkbey Test Network にデプロイしたコントラクトのアドレスを貼り付けてください\";\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n  \n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // renderNotConnectedContainer メソッドを定義します。\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n  /*\n  * ページがロードされたときに useEffect()内の関数が呼び出されます。\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  return (\n     <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n          あなただけの特別な NFT を Mint しよう💫\n          </p>\n          {/*条件付きレンダリングを追加しました\n          // すでに接続されている場合は、\n          // Connect to Walletを表示しないようにします。*/}\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={null} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;"]},"metadata":{},"sourceType":"module"}