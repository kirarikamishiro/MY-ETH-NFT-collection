{"ast":null,"code":"var _jsxFileName = \"/Users/hasamayoshihito/Documents/ETH-NFT-collection/nft-collection-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport \"./styles/App.css\"; // フロントエンドとコントラクトを連携するライブラリをインポートします。\n\nimport { ethers } from \"ethers\"; // useEffect と useState 関数を React.js からインポートしています。\n\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"あなたのTwitterハンドル\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50; // コトントラクトアドレスをCONTRACT_ADDRESS変数に格納\n\nconst CONTRACT_ADDRESS = \"0x10B6Ea716D860fF27A45D3f11E1DFd8f8622052a\";\n\nconst App = () => {\n  _s();\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(\"\"); // setupEventListener 関数を定義します。\n  // MyEpicNFT.sol の中で event が　emit された時に、\n  // 情報を受け取ります。\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer); // Event が　emit される際に、コントラクトから送信される情報を受け取っています。\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`あなたのウォレットに NFT を送信しました。OpenSea に表示されるまで最大で10分かかることがあります。NFT へのリンクはこちらです: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ユーザーが認証可能なウォレットアドレスを持っているか確認します。\n\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    } // ユーザーが認証可能なウォレットアドレスを持っている場合は、ユーザーに対してウォレットへのアクセス許可を求める。許可されれば、ユーザーの最初のウォレットアドレスを accounts に格納する。\n\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // イベントリスナーを設定\n      // この時点で、ユーザーはウォレット接続が済んでいます。\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      } // ウォレットアドレスに対してアクセスをリクエストしています。\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]); // ウォレットアドレスを currentAccount に紐付けます。\n\n      setCurrentAccount(accounts[0]); // イベントリスナーを設定\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // NFT を Mint する関数を定義しています。\n\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされた際に下記が実行されます。\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); // renderNotConnectedContainer メソッド（ Connect to Wallet を表示する関数）を定義します。\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this); // Mint NFT ボタンをレンダリングするメソッドを定義します。\n\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u304F\\u308A\\u3077\\u3068\\u3046\\u3069\\u3093\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hasamayoshihito/Documents/ETH-NFT-collection/nft-collection-starter-project/src/App.js"],"names":["ethers","React","useEffect","useState","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","setupEventListener","ethereum","window","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","console","log","toNumber","alert","error","checkIfWalletIsConnected","accounts","request","method","length","account","connectWallet","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","renderNotConnectedContainer","renderMintUI"],"mappings":"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","sourcesContent":["// App.js\nimport \"./styles/App.css\";\n\n// フロントエンドとコントラクトを連携するライブラリをインポートします。\nimport { ethers } from \"ethers\";\n// useEffect と useState 関数を React.js からインポートしています。\nimport React, { useEffect, useState } from \"react\";\n\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\nconst TWITTER_HANDLE = \"あなたのTwitterハンドル\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\n// コトントラクトアドレスをCONTRACT_ADDRESS変数に格納\nconst CONTRACT_ADDRESS = \"0x10B6Ea716D860fF27A45D3f11E1DFd8f8622052a\";\n\nconst App = () => {\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  // setupEventListener 関数を定義します。\n  // MyEpicNFT.sol の中で event が　emit された時に、\n  // 情報を受け取ります。\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        // Event が　emit される際に、コントラクトから送信される情報を受け取っています。\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `あなたのウォレットに NFT を送信しました。OpenSea に表示されるまで最大で10分かかることがあります。NFT へのリンクはこちらです: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ユーザーが認証可能なウォレットアドレスを持っているか確認します。\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // ユーザーが認証可能なウォレットアドレスを持っている場合は、ユーザーに対してウォレットへのアクセス許可を求める。許可されれば、ユーザーの最初のウォレットアドレスを accounts に格納する。\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n      // イベントリスナーを設定\n      // この時点で、ユーザーはウォレット接続が済んでいます。\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  // connectWallet メソッドを実装します。\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      // ウォレットアドレスに対してアクセスをリクエストしています。\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      console.log(\"Connected\", accounts[0]);\n\n      // ウォレットアドレスを currentAccount に紐付けます。\n      setCurrentAccount(accounts[0]);\n\n      // イベントリスナーを設定\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // NFT を Mint する関数を定義しています。\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ページがロードされた際に下記が実行されます。\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // renderNotConnectedContainer メソッド（ Connect to Wallet を表示する関数）を定義します。\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // Mint NFT ボタンをレンダリングするメソッドを定義します。\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMintNft}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Mint NFT\n    </button>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>くりぷとうどん</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}