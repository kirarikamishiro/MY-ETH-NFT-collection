{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { MyEpicNftABI } from \"../libs\";\nimport { MINT_PRICE, RINKEBY_CHAIN_ID, CONTRACT_ADDRESS } from \"../constants\";\nimport { useLocalStorage } from \"./useLocalStorage\";\nexport const useApp = () => {\n  _s();\n\n  const [lastTokenId, setLastTokenId] = useState(0);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [currentChainId, setCurrentChainId] = useState(\"\");\n  const [isRinkebyTestNetwork, setRinkebyTestNetwork] = useState(false);\n  const [inProgress, setInProgress] = useState(false);\n  const [myLatestTokenId, setMyLatestTokenId] = useState();\n  const [myLSLatestTokenId, setMyLSLatestTokenId] = useLocalStorage(\"myLatestTokenId\", myLatestTokenId);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window; // initial check\n\n    const chainId = await ethereum.request({\n      method: \"eth_chainId\"\n    });\n    const isRinkByChainId = chainId === RINKEBY_CHAIN_ID;\n    setRinkebyTestNetwork(isRinkByChainId);\n\n    if (!ethereum) {\n      alert(\"Make sure you have MetaMask!\");\n      return;\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      setCurrentAccount(account);\n    } else {\n      alert(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      } // ウォレットアドレスに対してアクセスをリクエスト\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNftABI.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT({\n          value: ethers.utils.parseEther(MINT_PRICE)\n        });\n        setInProgress(true);\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscmian.io/tx/${nftTxn.hash}`);\n        setLastTokenId(prevLastTokenId => prevLastTokenId + 1);\n        setInProgress(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleGetLastTokenId = async connectedContract => {\n    const id = await connectedContract.getLastTokenId();\n    if (!id) return;\n    setLastTokenId(id.toNumber() - 1);\n  };\n\n  useEffect(() => {\n    if (!myLSLatestTokenId) return;\n    setMyLatestTokenId(myLSLatestTokenId);\n  }, [myLSLatestTokenId]);\n  useEffect(() => {\n    if (!currentChainId) return;\n    const isRinkByChainId = currentChainId === RINKEBY_CHAIN_ID;\n    setRinkebyTestNetwork(isRinkByChainId);\n  }, [currentChainId]);\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) return;\n\n    const setChainId = chainId => {\n      setCurrentChainId(chainId);\n    };\n\n    ethereum.on(\"chainChanged\", setChainId);\n    return () => ethereum.off(\"chainChanged\", setChainId); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum || !currentAccount) return;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNftABI.abi, signer);\n    if (!connectedContract || !isRinkebyTestNetwork) return;\n    handleGetLastTokenId(connectedContract); // mint 後に emit された NewEpicNFTMinted から値を受け取る\n\n    const handleEmitEvent = (_from, tokenId) => {\n      setMyLatestTokenId(tokenId.toNumber());\n      setMyLSLatestTokenId(tokenId.toNumber());\n    };\n\n    connectedContract.on(\"NewEpicNFTMinted\", handleEmitEvent);\n    return () => connectedContract.off(\"NewEpicNFTMinted\", handleEmitEvent);\n  }, [currentAccount, isRinkebyTestNetwork, setMyLSLatestTokenId]);\n  return {\n    inProgress,\n    myLatestTokenId,\n    lastTokenId,\n    isRinkebyTestNetwork,\n    currentAccount,\n    connectWallet,\n    askContractToMintNft\n  };\n};\n\n_s(useApp, \"7dFDq8m/76eExR3ZmLMwagfkBEk=\", false, function () {\n  return [useLocalStorage];\n});","map":{"version":3,"sources":["/Users/hasamayoshihito/Documents/ETH-NFT-collection/nft-collection-starter-project/src/hooks/useApp.js"],"names":["useEffect","useState","ethers","MyEpicNftABI","MINT_PRICE","RINKEBY_CHAIN_ID","CONTRACT_ADDRESS","useLocalStorage","useApp","lastTokenId","setLastTokenId","currentAccount","setCurrentAccount","currentChainId","setCurrentChainId","isRinkebyTestNetwork","setRinkebyTestNetwork","inProgress","setInProgress","myLatestTokenId","setMyLatestTokenId","myLSLatestTokenId","setMyLSLatestTokenId","checkIfWalletIsConnected","ethereum","window","chainId","request","method","isRinkByChainId","alert","accounts","length","account","connectWallet","console","log","error","askContractToMintNft","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftTxn","makeAnEpicNFT","value","utils","parseEther","wait","hash","prevLastTokenId","handleGetLastTokenId","id","getLastTokenId","toNumber","setChainId","on","off","handleEmitEvent","_from","tokenId"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,gBAAvC,QAA+D,cAA/D;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACc,oBAAD,EAAuBC,qBAAvB,IAAgDf,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACkB,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,EAAtD;AACA,QAAM,CAACoB,iBAAD,EAAoBC,oBAApB,IAA4Cf,eAAe,CAC/D,iBAD+D,EAE/DY,eAF+D,CAAjE;;AAKA,QAAMI,wBAAwB,GAAG,YAAY;AAC3C,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB,CAD2C,CAE3C;;AACA,UAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAtB;AACA,UAAMC,eAAe,GAAGH,OAAO,KAAKrB,gBAApC;AACAW,IAAAA,qBAAqB,CAACa,eAAD,CAArB;;AACA,QAAI,CAACL,QAAL,EAAe;AACbM,MAAAA,KAAK,CAAC,8BAAD,CAAL;AACA;AACD;;AACD,UAAMC,QAAQ,GAAG,MAAMP,QAAQ,CAACG,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAvB;;AAEA,QAAIG,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAMC,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAxB;AACAnB,MAAAA,iBAAiB,CAACqB,OAAD,CAAjB;AACD,KAHD,MAGO;AACLH,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACD;AACF,GAlBD;;AAoBA,QAAMI,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAM;AAAEV,QAAAA;AAAF,UAAeC,MAArB;;AACA,UAAI,CAACD,QAAL,EAAe;AACbM,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACD,OALC,CAMF;;;AACA,YAAMC,QAAQ,GAAG,MAAMP,QAAQ,CAACG,OAAT,CAAiB;AACtCC,QAAAA,MAAM,EAAE;AAD8B,OAAjB,CAAvB;AAIAO,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,QAAQ,CAAC,CAAD,CAAjC;AACAnB,MAAAA,iBAAiB,CAACmB,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACD,KAbD,CAaE,OAAOM,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,GAjBD;;AAmBA,QAAMC,oBAAoB,GAAG,YAAY;AACvC,QAAI;AACF,YAAM;AAAEd,QAAAA;AAAF,UAAeC,MAArB;;AACA,UAAID,QAAJ,EAAc;AACZ,cAAMe,QAAQ,GAAG,IAAIrC,MAAM,CAACsC,SAAP,CAAiBC,YAArB,CAAkCjB,QAAlC,CAAjB;AACA,cAAMkB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,iBAAiB,GAAG,IAAI1C,MAAM,CAAC2C,QAAX,CACxBvC,gBADwB,EAExBH,YAAY,CAAC2C,GAFW,EAGxBJ,MAHwB,CAA1B;AAKAP,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,YAAIW,MAAM,GAAG,MAAMH,iBAAiB,CAACI,aAAlB,CAAgC;AACjDC,UAAAA,KAAK,EAAE/C,MAAM,CAACgD,KAAP,CAAaC,UAAb,CAAwB/C,UAAxB;AAD0C,SAAhC,CAAnB;AAGAc,QAAAA,aAAa,CAAC,IAAD,CAAb;AACA,cAAM6B,MAAM,CAACK,IAAP,EAAN;AACAjB,QAAAA,OAAO,CAACC,GAAR,CACG,6DAA4DW,MAAM,CAACM,IAAK,EAD3E;AAGA3C,QAAAA,cAAc,CAAE4C,eAAD,IAAqBA,eAAe,GAAG,CAAxC,CAAd;AACApC,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAnBD,MAmBO;AACLiB,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KAxBD,CAwBE,OAAOC,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,GA5BD;;AA8BA,QAAMkB,oBAAoB,GAAG,MAAOX,iBAAP,IAA6B;AACxD,UAAMY,EAAE,GAAG,MAAMZ,iBAAiB,CAACa,cAAlB,EAAjB;AACA,QAAI,CAACD,EAAL,EAAS;AACT9C,IAAAA,cAAc,CAAC8C,EAAE,CAACE,QAAH,KAAgB,CAAjB,CAAd;AACD,GAJD;;AAMA1D,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACqB,iBAAL,EAAwB;AACxBD,IAAAA,kBAAkB,CAACC,iBAAD,CAAlB;AACD,GAHQ,EAGN,CAACA,iBAAD,CAHM,CAAT;AAKArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACa,cAAL,EAAqB;AACrB,UAAMgB,eAAe,GAAGhB,cAAc,KAAKR,gBAA3C;AACAW,IAAAA,qBAAqB,CAACa,eAAD,CAArB;AACD,GAJQ,EAIN,CAAChB,cAAD,CAJM,CAAT;AAMAb,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,wBAAwB;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;AACA,QAAI,CAACD,QAAL,EAAe;;AACf,UAAMmC,UAAU,GAAIjC,OAAD,IAAa;AAC9BZ,MAAAA,iBAAiB,CAACY,OAAD,CAAjB;AACD,KAFD;;AAGAF,IAAAA,QAAQ,CAACoC,EAAT,CAAY,cAAZ,EAA4BD,UAA5B;AACA,WAAO,MAAMnC,QAAQ,CAACqC,GAAT,CAAa,cAAb,EAA6BF,UAA7B,CAAb,CARc,CASd;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA3D,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEwB,MAAAA;AAAF,QAAeC,MAArB;AACA,QAAI,CAACD,QAAD,IAAa,CAACb,cAAlB,EAAkC;AAElC,UAAM4B,QAAQ,GAAG,IAAIrC,MAAM,CAACsC,SAAP,CAAiBC,YAArB,CAAkCjB,QAAlC,CAAjB;AACA,UAAMkB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,UAAMC,iBAAiB,GAAG,IAAI1C,MAAM,CAAC2C,QAAX,CACxBvC,gBADwB,EAExBH,YAAY,CAAC2C,GAFW,EAGxBJ,MAHwB,CAA1B;AAMA,QAAI,CAACE,iBAAD,IAAsB,CAAC7B,oBAA3B,EAAiD;AAEjDwC,IAAAA,oBAAoB,CAACX,iBAAD,CAApB,CAdc,CAed;;AACA,UAAMkB,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC1C5C,MAAAA,kBAAkB,CAAC4C,OAAO,CAACN,QAAR,EAAD,CAAlB;AACApC,MAAAA,oBAAoB,CAAC0C,OAAO,CAACN,QAAR,EAAD,CAApB;AACD,KAHD;;AAIAd,IAAAA,iBAAiB,CAACgB,EAAlB,CAAqB,kBAArB,EAAyCE,eAAzC;AACA,WAAO,MAAMlB,iBAAiB,CAACiB,GAAlB,CAAsB,kBAAtB,EAA0CC,eAA1C,CAAb;AACD,GAtBQ,EAsBN,CAACnD,cAAD,EAAiBI,oBAAjB,EAAuCO,oBAAvC,CAtBM,CAAT;AAwBA,SAAO;AACLL,IAAAA,UADK;AAELE,IAAAA,eAFK;AAGLV,IAAAA,WAHK;AAILM,IAAAA,oBAJK;AAKLJ,IAAAA,cALK;AAMLuB,IAAAA,aANK;AAOLI,IAAAA;AAPK,GAAP;AASD,CA/IM;;GAAM9B,M;UAOuCD,e","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { MyEpicNftABI } from \"../libs\";\nimport { MINT_PRICE, RINKEBY_CHAIN_ID, CONTRACT_ADDRESS } from \"../constants\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n\nexport const useApp = () => {\n  const [lastTokenId, setLastTokenId] = useState(0);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [currentChainId, setCurrentChainId] = useState(\"\");\n  const [isRinkebyTestNetwork, setRinkebyTestNetwork] = useState(false);\n  const [inProgress, setInProgress] = useState(false);\n  const [myLatestTokenId, setMyLatestTokenId] = useState();\n  const [myLSLatestTokenId, setMyLSLatestTokenId] = useLocalStorage(\n    \"myLatestTokenId\",\n    myLatestTokenId\n  );\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    // initial check\n    const chainId = await ethereum.request({ method: \"eth_chainId\" });\n    const isRinkByChainId = chainId === RINKEBY_CHAIN_ID;\n    setRinkebyTestNetwork(isRinkByChainId);\n    if (!ethereum) {\n      alert(\"Make sure you have MetaMask!\");\n      return;\n    }\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      setCurrentAccount(account);\n    } else {\n      alert(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      // ウォレットアドレスに対してアクセスをリクエスト\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          MyEpicNftABI.abi,\n          signer\n        );\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT({\n          value: ethers.utils.parseEther(MINT_PRICE),\n        });\n        setInProgress(true);\n        await nftTxn.wait();\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscmian.io/tx/${nftTxn.hash}`\n        );\n        setLastTokenId((prevLastTokenId) => prevLastTokenId + 1);\n        setInProgress(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleGetLastTokenId = async (connectedContract) => {\n    const id = await connectedContract.getLastTokenId();\n    if (!id) return;\n    setLastTokenId(id.toNumber() - 1);\n  };\n\n  useEffect(() => {\n    if (!myLSLatestTokenId) return;\n    setMyLatestTokenId(myLSLatestTokenId);\n  }, [myLSLatestTokenId]);\n\n  useEffect(() => {\n    if (!currentChainId) return;\n    const isRinkByChainId = currentChainId === RINKEBY_CHAIN_ID;\n    setRinkebyTestNetwork(isRinkByChainId);\n  }, [currentChainId]);\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    const { ethereum } = window;\n    if (!ethereum) return;\n    const setChainId = (chainId) => {\n      setCurrentChainId(chainId);\n    };\n    ethereum.on(\"chainChanged\", setChainId);\n    return () => ethereum.off(\"chainChanged\", setChainId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (!ethereum || !currentAccount) return;\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      MyEpicNftABI.abi,\n      signer\n    );\n\n    if (!connectedContract || !isRinkebyTestNetwork) return;\n\n    handleGetLastTokenId(connectedContract);\n    // mint 後に emit された NewEpicNFTMinted から値を受け取る\n    const handleEmitEvent = (_from, tokenId) => {\n      setMyLatestTokenId(tokenId.toNumber());\n      setMyLSLatestTokenId(tokenId.toNumber());\n    };\n    connectedContract.on(\"NewEpicNFTMinted\", handleEmitEvent);\n    return () => connectedContract.off(\"NewEpicNFTMinted\", handleEmitEvent);\n  }, [currentAccount, isRinkebyTestNetwork, setMyLSLatestTokenId]);\n\n  return {\n    inProgress,\n    myLatestTokenId,\n    lastTokenId,\n    isRinkebyTestNetwork,\n    currentAccount,\n    connectWallet,\n    askContractToMintNft,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}