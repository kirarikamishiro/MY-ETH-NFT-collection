{"ast":null,"code":"var _jsxFileName = \"/Users/hasamayoshihito/Documents/ETH-NFT-collection/nft-collection-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport \"./styles/App.css\";\nimport Icon from './assets/food_teuchi_udon.png'; // フロントエンドとコントラクトを連携するライブラリをインポートします。\n\nimport { ethers } from \"ethers\"; // useEffect と useState 関数を React.js からインポートしています。\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"@KamishiroKirari\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50; // コトントラクトアドレスをCONTRACT_ADDRESS変数に格納\n\nconst CONTRACT_ADDRESS = \"0x76B8Db1DC225b1Ce0bAC22206eD6c603798221Cf\";\n\nconst App = () => {\n  _s();\n\n  const [mintCount, setMintCount] = useState(\"\"); // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [minting, setMinting] = useState(false);\n\n  const setupMintCount = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectdContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNFT.abi, signer);\n        const number = await connectdContract.TotalMintCount();\n        setMintCount(number.toNumber());\n        console.log(\"setup mint count\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // setupEventListener 関数を定義します。\n  // MyEpicNFT.sol の中で event が　emit された時に、\n  // 情報を受け取ります。\n\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer); // Event が　emit される際に、コントラクトから送信される情報を受け取っています。\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber()); //setMintCount(tokenId.toNumber())\n\n          alert(`あなたのウォレットに NFT を送信しました。OpenSea に表示されるまで最大で10分かかることがあります。NFT へのリンクはこちらです: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ユーザーが認証可能なウォレットアドレスを持っているか確認します。\n\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    let chainId = await ethereum.request({\n      method: 'eth_chainId'\n    });\n    console.log(\"Connected to chain \" + chainId); // 0x4 は　Rinkeby の ID です。\n\n    const rinkebyChainId = \"0x4\";\n\n    if (chainId !== rinkebyChainId) {\n      alert(\"You are not connected to the Rinkeby Test Network!\");\n    }\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    } // ユーザーが認証可能なウォレットアドレスを持っている場合は、ユーザーに対してウォレットへのアクセス許可を求める。許可されれば、ユーザーの最初のウォレットアドレスを accounts に格納する。\n\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // イベントリスナーを設定\n      // この時点で、ユーザーはウォレット接続が済んでいます。\n\n      setupMintCount();\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      } // ウォレットアドレスに対してアクセスをリクエストしています。\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]); // ウォレットアドレスを currentAccount に紐付けます。\n\n      setCurrentAccount(accounts[0]); // イベントリスナーを設定\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // NFT を Mint する関数を定義しています。\n\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        setMinting(true);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setMinting(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされた際に下記が実行されます。\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); // renderNotConnectedContainer メソッド（ Connect to Wallet を表示する関数）を定義します。\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this); // Mint NFT ボタンをレンダリングするメソッドを定義します。\n\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: \"\\u6CE8\\u6587\\u3059\\u308B\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: \"\\u304F\\u308A\\u3077\\u3068\\u3046\\u3069\\u3093\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u30DC\\u30BF\\u30F3\\u3092\\u62BC\\u3057\\u3066\\u3046\\u3069\\u3093\\u304C\\u8CB7\\u3048\\u308BNFT\\u3092\\u4F5C\\u308D\\u3046\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this), minting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          height: 300\n        },\n        src: Icon,\n        alt: \"\\u30A2\\u30A4\\u30B3\\u30F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u8ABF\\u7406\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mintCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"+lQF7Q/5DVLiQcKbI4A5jcjifvY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hasamayoshihito/Documents/ETH-NFT-collection/nft-collection-starter-project/src/App.js"],"names":["Icon","ethers","React","useEffect","useState","useMemo","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","mintCount","setMintCount","currentAccount","setCurrentAccount","minting","setMinting","setupMintCount","ethereum","window","provider","providers","Web3Provider","signer","getSigner","connectdContract","Contract","myEpicNFT","abi","number","TotalMintCount","toNumber","console","log","error","setupEventListener","connectedContract","on","from","tokenId","alert","checkIfWalletIsConnected","chainId","request","method","rinkebyChainId","accounts","length","account","connectWallet","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","renderNotConnectedContainer","renderMintUI","height"],"mappings":"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","sourcesContent":["// App.js\nimport \"./styles/App.css\";\nimport Icon from './assets/food_teuchi_udon.png'\n\n// フロントエンドとコントラクトを連携するライブラリをインポートします。\nimport { ethers } from \"ethers\";\n// useEffect と useState 関数を React.js からインポートしています。\nimport React, { useEffect, useState ,useMemo} from \"react\";\n\n\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\nconst TWITTER_HANDLE = \"@KamishiroKirari\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\n// コトントラクトアドレスをCONTRACT_ADDRESS変数に格納\nconst CONTRACT_ADDRESS = \"0x76B8Db1DC225b1Ce0bAC22206eD6c603798221Cf\";\n\n\n\nconst App = () => {\n  const [mintCount,setMintCount] =useState(\"\");\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [minting,setMinting] =useState(false);\n\n  \n  \n  const setupMintCount = async() =>{\n    try{\n      const {ethereum} =window;\n      if(ethereum){\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectdContract = new ethers.Contract(CONTRACT_ADDRESS,myEpicNFT.abi,signer);\n        const number =  await connectdContract.TotalMintCount();\n        setMintCount(number.toNumber());\n        console.log(\"setup mint count\");\n      }else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    }catch (error) {\n      console.log(error)\n    }\n  }\n\n  // setupEventListener 関数を定義します。\n  // MyEpicNFT.sol の中で event が　emit された時に、\n  // 情報を受け取ります。\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        // Event が　emit される際に、コントラクトから送信される情報を受け取っています。\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          //setMintCount(tokenId.toNumber())\n          alert(\n            `あなたのウォレットに NFT を送信しました。OpenSea に表示されるまで最大で10分かかることがあります。NFT へのリンクはこちらです: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n\n        console.log(\"Setup event listener!\");\n        \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ユーザーが認証可能なウォレットアドレスを持っているか確認します。\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n  console.log(\"Connected to chain \" + chainId);\n  // 0x4 は　Rinkeby の ID です。\n  const rinkebyChainId = \"0x4\";\n  if (chainId !== rinkebyChainId) {\n    alert(\"You are not connected to the Rinkeby Test Network!\");\n  }\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // ユーザーが認証可能なウォレットアドレスを持っている場合は、ユーザーに対してウォレットへのアクセス許可を求める。許可されれば、ユーザーの最初のウォレットアドレスを accounts に格納する。\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n      // イベントリスナーを設定\n      // この時点で、ユーザーはウォレット接続が済んでいます。\n      setupMintCount();\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  // connectWallet メソッドを実装します。\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      // ウォレットアドレスに対してアクセスをリクエストしています。\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      console.log(\"Connected\", accounts[0]);\n\n      // ウォレットアドレスを currentAccount に紐付けます。\n      setCurrentAccount(accounts[0]);\n\n      // イベントリスナーを設定\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  \n\n  // NFT を Mint する関数を定義しています。\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        setMinting(true);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n        setMinting(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  \n\n  // ページがロードされた際に下記が実行されます。\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // renderNotConnectedContainer メソッド（ Connect to Wallet を表示する関数）を定義します。\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // Mint NFT ボタンをレンダリングするメソッドを定義します。\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMintNft}\n      className=\"cta-button connect-wallet-button\"\n    >\n      注文する\n    </button>\n  );\n\n\n\n\n  return (\n    <div className=\"App\">\n        <h1 className=\"header\">くりぷとうどん</h1>\n        <h2>ボタンを押してうどんが買えるNFTを作ろう</h2>\n        \n        {minting  ? (\n          <>\n            <img \n              style={{\n                height: 300,\n              }}\n              src={Icon}  \n              alt=\"アイコン\"\n            /><br></br>\n\n            <p>調理中...</p>\n          </>\n        ):(\n          <p>{mintCount}</p>\n        )}\n        \n        \n        {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUI()}\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}